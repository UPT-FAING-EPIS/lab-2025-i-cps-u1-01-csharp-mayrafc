name: SonarQube & Publish NuGet Package

env:
  DOTNET_VERSION: '8.0.x'
  SONAR_ORG: 'apibankk'
  SONAR_PROJECT: 'apibankk_apibank'
  PACKAGE_NAME: 'MiPaquete.ApiBank'
  PACKAGE_VERSION: '1.0.0'

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build, Analyze, Pack, Push & Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java (SonarScanner requirement)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Start SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.sources="Bank/Bank.Domain" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Restore, Test and Build
        run: |
          dotnet restore Bank/Bank.sln
          dotnet test Bank/Bank.Domain.Tests/Bank.Domain.Tests.csproj --collect:"XPlat Code Coverage;Format=opencover"
          dotnet build Bank/Bank.sln --configuration Release

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Pack NuGet package
        run: |
          cd Bank/Bank.Domain
          dotnet pack Bank.Domain.csproj --configuration Release --output ./nupkg

      - name: Add GitHub NuGet source
        run: |
          dotnet nuget add source --username ${{ github.actor }} \
            --password ${{ secrets.GH_NUGET_TOKEN }} \
            --store-password-in-clear-text \
            --name github "https://nuget.pkg.github.com/mayrafc/index.json"



      - name: Push NuGet package to GitHub Packages
        env:
          GH_NUGET_TOKEN: ${{ secrets.GH_NUGET_TOKEN }}
        run: |
          dotnet nuget push Bank/Bank.Domain/nupkg/*.nupkg \
            --source github \
            --api-key ${{ secrets.GH_NUGET_TOKEN }} \
            --skip-duplicate

      - name: Generate Changelog from Commits
        id: changelog
        run: echo "changelog=$(git log --pretty=format:'- %s' --no-merges -10)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.PACKAGE_VERSION }}" \
            --title "Release v${{ env.PACKAGE_VERSION }}" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            Bank/Bank.Domain/nupkg/*.nupkg
