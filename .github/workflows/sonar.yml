name: Sonar Continuous Integration & NuGet Release

env:
  DOTNET_VERSION: '8.x'
  SONAR_ORG: 'apibankk'
  SONAR_PROJECT: 'apibankk_apibank'
  PACKAGE_NAME: 'MiPaquete.ApiBank'     # ⚠️ Asegúrate que coincida con tu .csproj
  PACKAGE_VERSION: '1.0.0'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-sonar-nuget:
    name: Sonar + NuGet + Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Instalar SonarScanner
        run: dotnet tool install -g dotnet-sonarscanner

      - name: Restaurar y testear
        run: |
          dotnet restore
          dotnet test --collect:"XPlat Code Coverage;Format=opencover"

      - name: Iniciar análisis Sonar
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Compilar proyecto
        run: dotnet build --no-restore

      - name: Finalizar análisis Sonar
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Crear paquete NuGet
        run: |
          dotnet pack --configuration Release --output ./nupkg

      - name: Publicar paquete NuGet en GitHub Packages
        run: |
          dotnet nuget push ./nupkg/${{ env.PACKAGE_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar GitHub CLI
        uses: cli/cli@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generar changelog desde commits
        run: |
          git fetch --tags
          tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          changelog=$(git log ${tag}..HEAD --pretty=format:"- %s")
          echo "$changelog" > changelog.md

      - name: Crear release en GitHub
        run: |
          gh release create "v${{ env.PACKAGE_VERSION }}" ./nupkg/${{ env.PACKAGE_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg \
            --title "Release v${{ env.PACKAGE_VERSION }}" \
            --notes-file changelog.md
