name: Sonar Continuos Integration
env:
  DOTNET_VERSION: '8.x'                 # La versi贸n de .NET
  SONAR_ORG: 'apibankk'                 # Nombre de la organizaci贸n en SonarCloud
  SONAR_PROJECT: 'apibankk_apibank'     # Clave del proyecto en SonarCloud
  PACKAGE_NAME: 'MiPaquete.ApiBank'  
  PACKAGE_VERSION: '1.0.0'              # Versi贸n del paquete NuGet
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  sonarqube:
    name: Sonarqube Analysis and NuGet Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Configurando la versi贸n de .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Instalar Scanner
        run: dotnet tool install -g dotnet-sonarscanner
      - name: Ejecutar pruebas
        run: |
          dotnet restore 
          dotnet test --collect:"XPlat Code Coverage;Format=opencover"
          dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="*/*/*/coverage.opencover.xml" /d:sonar.qualitygate.wait=true
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Crear el paquete .nupkg
      - name: Crear paquete .nupkg (NuGet)
        run: |
          dotnet pack --configuration Release --output ./nupkg

      # Publicar el paquete en GitHub Packages
      - name: Publicar paquete NuGet en GitHub Packages
        run: |
          echo "Publicando NuGet package en GitHub Packages..."
          dotnet nuget push ./nupkg/${{ env.PACKAGE_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}

      # Configurar GitHub CLI
      - name: Configurar GitHub CLI
        uses: cli/cli@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Generar notas de release basadas en los mensajes de commits
      - name: Generar notas de release
        run: |
          changelog=$(git log --oneline $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s" | sed -e 's/^/  - /')
          echo "Changelog: $changelog"
          echo "$changelog" > changelog.md

      # Crear un release en GitHub
      - name: Crear release en GitHub
        run: |
          gh release create "v1.0.0" ./nupkg/${{ env.PACKAGE_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg --title "Release 1.0.0" --notes-file changelog.md
